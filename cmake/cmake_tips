- Generation of an executable

  CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

  PROJECT(project1 C)

  ADD_DEFINITIONS(-g -O2 -fsigned-char -freg-struct-return -Wall -W -Wshadow -Wstrict-prototypes -Wpointer-arith -Wcast-qual -Winline -Werror)

  ADD_EXECUTABLE(simple main.c)


        This is the top CMakeLists.txt of the project.

        We define the minimum version of cmake that we support for this project
        through the directive CMAKE_MINIMUM_REQUIRED.

        We identify the project as well as the programming language with the
        PROJECT directive.

        We define the flags that will be passed as arguments to the compiler
        through the ADD_DEFINITIONS directive.  It is optional to do it but the
        default flags passed to the compiler are not sufficiently severe to
        check and report the warnings and bugs.

        We specify the target executable simple with the ADD_EXECUTABLE
        directive.


- Generation of an executable linked to a library

  The project generates one target: an executable called crypto. The executable
  needs the standard library libcrypt.so



  CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

  PROJECT(project2 C)

  ADD_DEFINITIONS(-g -O2 -fsigned-char -freg-struct-return -Wall -W -Wshadow -Wstrict-prototypes -Wpointer-arith -Wcast-qual -Winline -Werror)

  ADD_EXECUTABLE(crypto main.c)

  TARGET_LINK_LIBRARIES(crypto crypt)


     As crypto needs the libcrypt.so library, we specify it with the directive
     TARGET_LINK_LIBRARIES. [note that crypt is defined in /usr/include/]


- Generation of an executable and a shared library with the same name



  roof
   |
   |----- lib -------- roof.c roof_p.h  CMakeLists.txt
   |----- client ----- main.c               CMakeLists.txt
   |----- include ---- roof.h
   +----- bin -------- main.o roof.o roof libroof.so
   + CMakeLists.txt


   The project generates two targets: a shared library called libroof.so and an
   executable called roof.  All the objects are stored into the sub-directory
   bin.


   Top level CMakeLists.txt

        CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

        PROJECT(roof C)

        INCLUDE_DIRECTORIES(include lib)
        ADD_DEFINITIONS(-g -O2 -fsigned-char -freg-struct-return -Wall -W -Wshadow -Wstrict-prototypes -Wpointer-arith -Wcast-qual -Winline -Werror)


        ADD_SUBDIRECTORY(lib bin)
        ADD_SUBDIRECTORY(client bin)


***     We specify the directories where are located the *include* [ .h ] files
        (include and lib) with the INCLUDE_DIRECTORIES directive.

        We specify the list of sub-directories where are located the sources to
        compile (lib and client) along with the target binary directory where
        are going the object files (bin) with the ADD_SUBDIRECTORY directive.


  CMakeLists.txt in lib

    SET(roof_lib_src roof.c)

        ADD_LIBRARY(roof SHARED ${roof_lib_src})


        The directory lib contains all the files to make the library libroof.so.

        We assign a variable called roof_lib_src with the list of source files
        which will be used to build the shared library.  There is actually only
        one file called roof.c. This is done with the SET directive.

        Then we define the shared library to build through the directive
        ADD_LIBRARY.  This directive is passed the name of the library (roof) to
        build libroof.so, the SHARED keyword to specify that it is a shared
        library and the list of source files which are part of the library with
        the variable roof_lib_src.


  CMakeLists.txt in client

    ADD_EXECUTABLE(roof)
        TARGET_LINK_LIBRARIES(roof roof)

    The directory client contains the files to make the executable roof.
    We first define the target executable with ADD_EXECUTABLE directive.
    We first assign a variable called roof_client_src with the list of source
    files which will be used to build the executable.  There is actually only
    one file called main.c. This is done with the SET directive.  We define the
    dependency of the executable called roof with the libroof.so through the
    TARGET_LINK_LIBRARIES directive.  There is a problem here as we would like
    to generate an executable called roof and a library called libroof.so.

    In fact, cmake gets confused because it has the impression that we want to
    build roof with itself.  Hence the use of an intermediate name main in the
    directives TARGET_LINK_LIBRARIES and ADD_EXECUTABLE.  Then, we tell cmake to
    rename the generated main executable into roof thanks to the directive
    SET_TARGET_PROPERTIES.

        SET(roof_client_src main.c)

        ADD_EXECUTABLE(main ${roof_client_src})

        # roof here is libroof, built prior to main
        TARGET_LINK_LIBRARIES(main roof)

        # rename main.out to roof.out
        SET_TARGET_PROPERTIES(main
                              PROPERTIES OUTPUT_NAME roof)


- Generation and installation of a program along with its manuals

  The project called PROJECT4 builds an executable called pdip and a set of
  Linux manuals compressed with gzip tool.  The project is spreaded in the
  following sub-tree


  project4
  |
  |
  |-  pdip.c pdip_en.1 pdip_fr.1

  pdip.c is the source of the program and pdip_en.1 and pdip_fr.1 are
  respectively the english and french manuals.  The following sub-tree shows the
  files that have been added to build the project.


  project4
  |
  |- pdip.c pdip_en.1 pdip_fr.1 FindGZIP.cmake CMakeLists.txt pdip_chwon.cmake


  - FindGZIP.cmake in project4

***  As the project needs to install the manuals in compressed format, we use
     the directive FIND_PROGRAM to check the presence of the gzip tool ***

  The directive is passed the list of directories to find into (/bin, /usr/bin
  and /usr/local/bin)

  The result of the command goes into the variable GZIP_TOOL passed as first
  parameter of the directive.  If gzip is found, its path is stored into the
  variable GZIP_TOOL.  If it is not found, GZIP_TOOL is assigned with
  GZIP_TOOL-NOTFOUND


 The result of the search is checked with the IF directive which returns true if
 the variable's value is not empty,

 0,  N, NO, OFF, FALSE, NOTFOUND or <variable>-NOTFOUND.

 If the test is false, a message is displayed thanks to the MESSAGE directive
 with a weight set to FATAL_ERROR to stop any future processing.


 - CMakeLists.txt in project4



    CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

        PROJECT(project4 C)

        # Search for gzip program
        INCLUDE (FindGZIP.cmake)

        SET(pdip_src pdip.c)
        SET(pdip_exe pdip)
        SET(pdip_man_src pdip_en.1 pdip_fr.1)
        SET(pdip_man_gz pdip_en.1.gz pdip_fr.1.gz)

        # Compression of the manuals
        FOREACH(man ${pdip_man_src})
        ADD_CUSTOM_COMMAND(OUTPUT ${man}.gz
                    COMMAND ${GZIP_TOOL} -c ${man} > ${man}.gz
                                        DEPENDS ${man}
                    COMMENT "Building ${man}.gz")
        ENDFOREACH(man)

        # Compilation options passed to the compiler
        ADD_DEFINITIONS(-g -O2 -fsigned-char -freg-struct-return -Wall -W -Wshadow -Wstrict-prototypes -Wpointer-arith -Wcast-qual -Winline -Werror)

        # Build of the program
        ADD_EXECUTABLE(${pdip_exe} ${pdip_src} ${pdip_man_gz})

        # Installation of the program
        INSTALL(TARGETS pdip
        DESTINATION "bin"
                PERMISSIONS OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

        # Installation of the manuals
        INSTALL(FILES pdip_fr.1.gz
        DESTINATION "share/man/fr/man1"
                PERMISSIONS OWNER_READ GROUP_READ WORLD_READ RENAME pdip.1.gz)
        INSTALL(FILES pdip_en.1.gz
        DESTINATION "share/man/man1"
                PERMISSIONS OWNER_READ GROUP_READ WORLD_READ RENAME pdip.1.gz)

        # Script to be executed at installation time (kind of post-intallation script) to
        # change the right accesses on the installed files
        INSTALL(SCRIPT pdip_chown.cmake)


   Then we include the file FindGZIP.cmake  to trigger the search of the gzip
   tool (INCLUDE directive).  If gzip tool has been found, its pathname is
   stored in the variable GZIP_TOOL.


   Three variables are set with the SET directive:

        pdip_src is the list of source files to compile (pdip.c)
        pdip_exe is the name of the output executable (pdip)
        pdip_man_src is the list of manuals to compress (pdip_en.1 and pdip_fr.1)
        pdip_man_gz is the list of compressed manuals


    In the loop (FOREACH directive), we define the targets of the manuals and
    the way to build them through the directive ADD_CUSTOM_COMMAND.

    This directive also lists the dependencies (DEPENDS) of the target to
    trigger the build only if the source manuals have been modified.  The
    COMMENT tag is useful to make cmake display the string "Building
    pdip_....1.gz" while triggering the command.


    The entry point of the build is the ADD_EXECUTABLE directive which specifies
    that the output program pdip depends on the source code pdip.c and the
    compressed manuals pdip_en.1.gz and pdip_fr.1.gz.

    The following directives describe the installation of the software. The
    installation is done from the directory specified by the content of the
    variable CMAKE_INSTALL_PREFIX. It defaults to /usr/local:

     pdip is installed in the bin sub-directory with the appropriate permissions
     The compressed manuals are installed in share/man/...


   - pdip_chown.cmake

     # Copy the files to the destination directory
        EXECUTE_PROCESS(COMMAND chown root ${CMAKE_INSTALL_PREFIX}/bin/pdip
        COMMAND chgrp root ${CMAKE_INSTALL_PREFIX}/bin/pdip
        COMMAND chown root ${CMAKE_INSTALL_PREFIX}/share/man/fr/man1/pdip.1.gz
        COMMAND chgrp root ${CMAKE_INSTALL_PREFIX}/share/man/fr/man1/pdip.1.gz
        COMMAND chown root ${CMAKE_INSTALL_PREFIX}/share/man/man1/pdip.1.gz
        COMMAND chgrp root ${CMAKE_INSTALL_PREFIX}/share/man/man1/pdip.1.gz)


- Installation of an executable and an API in a shared library along with
  include files and manuals


  roof
  |
  |--- lib ------------------------ roof.c roof_p.h CMakeLists.txt
  |--- client --------------------- main.c CMakeLists.txt
  |--- Include -------------------- roof.h CMakeLists.txt
  |--- man ------------------------ roof.1 ... roof.3 CMakeLists.txt FindGZIP.cmake
  +--- CMakeLists.txt


  - Top Level CMakeLists.txt


    CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

        PROJECT(roof C)

        INCLUDE_DIRECTORIES(include lib)

        ADD_DEFINITIONS(-g -O2 -fsigned-char -freg-struct-return -Wall -W -Wshadow -Wstrict-prototypes -Wpointer-arith -Wcast-qual -Winline -Werror)

        ADD_SUBDIRECTORY(lib)
        ADD_SUBDIRECTORY(client)
        ADD_SUBDIRECTORY(man)
        ADD_SUBDIRECTORY(include)

  We specify the list of sub-directories where are located the sources to build
  (lib, client, man and include) with the ADD_SUBDIRECTORY directive.  We don't
  specify a directory (second argument of ADD_SUBDIRECTORY) where to put all the
  binaries because we faced some problems for the installation of the shared
  library (Bug in cmake ?).


  - CMakeLists.txt in lib

    # Make shared library libroof.so from 'roof.c'
        ADD_LIBRARY(roof SHARED roof.c)

        # Set the build version (VERSION) and the API version (SOVERSION)
        SET_TARGET_PROPERTIES(roof
                      PROPERTIES
                                          VERSION 1.0.0
                                          SOVERSION 1)

        # Installation of the library
        INSTALL(TARGETS roof
        DESTINATION lib
                PERMISSIONS OWNER_READ GROUP_READ WORLD_READ)


 - CMakeLists.txt in client

   # 'main' depends on some C source files
   ADD_EXECUTABLE(main main.c)

   # 'main' depends on libroof.so
   TARGET_LINK_LIBRARIES(main roof)

   # In the preceding rules, we can't use 'roof' as target name otherwise
   # cmake will return in error with TARGET_LINK_LIBRARIES(roof roof):
   #
   #    CMake Error: Attempt to add link target roof of type: EXECUTABLE
   #    to target roof. You can only link to STATIC or SHARED libraries.
   #
   # Hence the SET_TARGET_PROPERTIES to rename main to roof
   #
   SET_TARGET_PROPERTIES(main
                         PROPERTIES OUTPUT_NAME roof)

   # Installation of the program
   INSTALL(TARGETS main
           RUNTIME
                   DESTINATION bin
           PERMISSIONS OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)


 - CMakeLists.txt in Include

   INSTALL(FILES roof.h
           DESTINATION include
                   PERMISSIONS OWNER_READ GROUP_READ WORLD_READ)

 - FindGZIP.cmake in man

   FIND_PROGRAM(GZIP_TOOL
                NAMES gzip
                                PATHS /bin
                /usr/bin
                    /usr/local/bin)


   IF(NOT GZIP_TOOL)
     MESSAGE(FATAL_ERROR "Unable to find 'gzip' program")
   ENDIF(NOT GZIP_TOOL)


 - CMakeLists.txt in man

   # Search for gzip program
   INCLUDE (FindGZIP.cmake)

   # Lists of source manuals
   SET(roof_man_src_1 roof.1)
   SET(roof_man_src_3 roof_cwd.3
                   roof_login.3
                                   roof_pwd.3)
   SET(roof_man_src_7 roof.7)

   # Lists of compressed manuals
   STRING(REGEX REPLACE ".1" ".1.gz" roof_man_gz_1 "${roof_man_src_1}")
   STRING(REGEX REPLACE ".3" ".3.gz" roof_man_gz_3 "${roof_man_src_3}")
   STRING(REGEX REPLACE ".7" ".7.gz" roof_man_gz_7 "${roof_man_src_7}")

   # Compression of the manuals
   FOREACH(man ${roof_man_src_1} ${roof_man_src_3} ${roof_man_src_7})
                ADD_CUSTOM_COMMAND(OUTPUT ${man}.gz
                     COMMAND ${GZIP_TOOL} -c ${man} > ${man}.gz
                         DEPENDS ${man}
                             COMMENT "Building ${man}.gz")
   ENDFOREACH(man)

   # Add the manual generation in the global rules
   ADD_CUSTOM_TARGET(man ALL
                  DEPENDS ${roof_man_gz_1} ${roof_man_gz_3} ${roof_man_gz_7})

   # Installation of the manuals
   INSTALL(FILES ${roof_man_gz_1}
           DESTINATION "share/man/man1"
                           PERMISSIONS OWNER_READ GROUP_READ WORLD_READ)
   INSTALL(FILES ${roof_man_gz_3}
           DESTINATION "share/man/man3"
                           PERMISSIONS OWNER_READ GROUP_READ WORLD_READ)
   INSTALL(FILES ${roof_man_gz_7}
           DESTINATION "share/man/man7"
                           PERMISSIONS OWNER_READ GROUP_READ WORLD_READ)


   Thanks to the string manipulation directive STRING on the preceding
   variables, we define three other variables containing the list of compressed
   manuals (suffix .gz).

   We define the target man to be added to the default build target so that it
   will be run every time through the directive ADD_CUSTOM_TARGET.  But we make
   it depend on the source manuals to avoid rebuilding the manuals each time we
   invoke make.

   The installation of the compressed manuals is specified with the INSTALL
   directives. It is said that the destination directory from the installation
   tree will be share/man/manX. The installation tree is specified by the
   variable CMAKE_INSTALL_PREFIX.



- Packaging of a project

  Loosely speaking, cmake is associated to the CPack tool to manage the
  packages. For the moment, the DEB or RPM packages are not supported.

  Only the following format are available:

    STGZ: Self extracting Tar GZip compression
    TBZ2: Tar BZip2 compression
     TGZ: Tar GZip compression
      TZ: Tar Compress compression
     ZIP: ZIP file format

  In this project, we generate a package for project 5.

  We just need to add the directive INCLUDE(CPack) in the top CMakeLists.txt
  file.

  Optionally, it is possible to set some configuration variables for CPack like
  CPACK_PACKAGE_VERSION_MAJOR, CPACK_PACKAGE_VERSION_MINOR,
  CPACK_PACKAGE_VERSION_PATCH...


  This generates a new target called package in the build system. When this
  target is built, CPack is invoked to generate all of the packages.

  Internally, CPack uses the CMake's install directives to make the package.


        CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

        PROJECT(roof C)

        INCLUDE_DIRECTORIES(include lib)

        ADD_DEFINITIONS(-g -O2 -fsigned-char -freg-struct-return -Wall -W -Wshadow -Wstrict-prototypes -Wpointer-arith -Wcast-qual -Winline -Werror)

    ADD_SUBDIRECTORY(lib)
        ADD_SUBDIRECTORY(client)
        ADD_SUBDIRECTORY(man)
        ADD_SUBDIRECTORY(include)

        SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Remote Operations On Files")
    SET(CPACK_PACKAGE_VENDOR "Rachid Koucha")
   #SET(CPACK_PACKAGE_DESCRIPTION_FILE  "${CMAKE_CURRENT_SOURCE_DIR}/ReadMe.txt")
    SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR }/COPYING")
        SET(CPACK_PACKAGE_VERSION_MAJOR "1")
        SET(CPACK_PACKAGE_VERSION_MINOR "0")
        SET(CPACK_PACKAGE_VERSION_PATCH "0")
        SET(CPACK_PACKAGE_INSTALL_DIRECTORY "CMake ${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}")
   #SET(CPACK_STRIP_FILES "bin/MyExecutable")
   #SET(CPACK_SOURCE_STRIP_FILES "")
    SET(CPACK_PACKAGE_EXECUTABLES "roof" "FTP client")
    INCLUDE(CPack)


- Generation of a configuration file

  project7
  |
  |-- main.c
  |-- config.h.cmake
  |-- simple.out
  + CMakeLists.txt

  CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

  PROJECT(project7 C)

  SET(PROJECT_NAME SIMPLE)

  SET(SIMPLE_MAJOR 1)
  SET(SIMPLE_MINOR 8)
  SET(SIMPLE_PATCH 6)
  SET(SIMPLE_VERSION ${SIMPLE_MAJOR}.${SIMPLE_MINOR}.${SIMPLE_PATCH})


  CONFIGURE_FILE(config.h.cmake config.h)

  ADD_DEFINITIONS(-g -O2 -fsigned-char -freg-struct-return -Wall -W -Wshadow -Wstrict-prototypes -Wpointer-arith -Wcast-qual -Winline -Werror)

  ADD_EXECUTABLE(simple main.c)


  We make the header file config.h via the directive CONFIGURE_FILE. It is
  passed a file skeleton (config.h.cmake) which will be converted into config.h
  with some substitutions.


    config.h.cmake

    // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    // File        : config.h
    // Description : Configuration of @PROJECT_NAME@
    // -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

    #ifndef CONFIG_H
    #define CONFIG_H

    //---------------------------------------------------------------------------
    // Name : SIMPLE_VERSION
    // Usage: Version of @PROJECT_NAME@
    //----------------------------------------------------------------------------
    #define SIMPLE_VERSION "@SIMPLE_VERSION@"

    #endif // CONFIG_H


- Generation of a Linux User Space program along with its kernel module

  project8
  |
  |----- udp_console_u.c
  |----- udpc_console_k.c
  |----- udpc
  |----- Kbuild
  |----- config.h.cmake
  |----- CMakeLists.txt
  +----- udpc.ko


  The project generates two targets: a user space executable called udpc and a
  kernel module called udpc.ko.  All the objects are stored into the top level
  directory. The file udpc_console_u.c needs some configuration macros that are
  located in a header file called config.h. The latter is built automatically by
  cmake as it is setup thanks to some cmake variables.

        cmake_minimum_required(VERSION 2.4)

        PROJECT(udpc C)

        SET(PROJECT_NAME UDPC)

        # Version number
        SET(UDPC_MAJOR 1)
        SET(UDPC_MINOR 0)
        SET(UDPC_PATCH 0)
        SET(UDPC_VERSION ${UDPC_MAJOR}.${UDPC_MINOR}.${UDPC_PATCH})


        MESSAGE(STATUS "Building UDPC version ${UDPC_VERSION}")

        CONFIGURE_FILE(config.h.cmake config.h)


        SET(udpc_src udp_console_u.c)
        SET(udpc_exe udpc)

        ADD_DEFINITIONS(-g -O2 -fsigned-char -freg-struct-return -Wall -W -Wshadow -Wstrict-prototypes -Wpointer-arith -Wcast-qual -Winline -Werror)

        # Build of the program
        ADD_EXECUTABLE(${udpc_exe} ${udpc_src})

        # Build the module
        EXECUTE_PROCESS(COMMAND uname -r
                        OUTPUT_VARIABLE os_release
                        OUTPUT_STRIP_TRAILING_WHITESPACE)
        SET(module_path /lib/modules/${os_release})
        SET(module_build_path ${module_path}/build)

        ADD_CUSTOM_COMMAND(OUTPUT udpc.ko
                           COMMAND make -C ${module_build_path} M=`pwd`
                           DEPENDS udp_console_k.c Kbuild
                           COMMENT "Building udpc.ko"
                          )

        ADD_CUSTOM_TARGET(kudpc ALL DEPENDS udpc.ko)


        # Installation of the module
        SET(module_install_path ${module_path}/kernel)
        INSTALL(FILES udpc.ko
                DESTINATION ${module_install_path}
                PERMISSIONS OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

        # Installation of the program
        INSTALL(TARGETS udpc
                DESTINATION "bin"
                PERMISSIONS OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)


  To build the Linux kernel module:

  We get the version of the running Linux system by running the command "uname
  -r" through the directive EXECUTE_PROCESS. We use the flag
  OUTPUT_STRIP_TRAILING_WHITESPACE to get rid of the end of line at the end of
  the command result.

  The version of the running Linux system is used to make the Linux kbuild
  directory that we store in the variable module_build_path

  We define the target of the Linux kernel module (ADD_CUSTOM_TARGET directive)
  and the way to build it through the directive ADD_CUSTOM_COMMAND. This
  directive also lists the dependencies (DEPENDS) of the target to trigger the
  build only if the source udp_console_k.c or Kbuild has been modified. The
  COMMENT tag is useful to make cmake display the string "Building udpc.ko"
  while triggering the command. The file Kbuild is used by this command to build
  the module as explained in Linux documentation embedded in the sources of the
  kernel (.../Documentation/kbuild/kbuild.txt)

  Then the kernel module and the executable are installed through the INSTALL
  directive.
